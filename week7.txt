week 7 pointers & dynamic memory allocation
1) pointers and address
pointer ใช้เก็บค่า address ในหน่วยความจำที่ต้องการอ้างถึง ซึ่งค่าจะเป็นจำนวนเต็มบวกที่เริ่มจาก 0 และจะบอกว่าตำแหน่งในหน่วยความจำนั้นมีการเก็บข้อมูลประเภทอะไร
2) pointer operations
- & เรียกว่า address operator เป็น unary operator ที่ต้องการเพียง 1 operand โดยที่ operand อยู่ในรูปตัวแปร ใช้หาค่าตำแหน่งในหน่วยความจำของ operand
- * เรียกว่า dereferencing operator หรือ indirection operator เป็น unary operator ใช้ในการเข้าถึงข้อมูลที่ถูกอ้างอิงโดยค่าตำแหน่งในหน่วยความจำที่มีค่าเป็น operand
    scanf() เทียบได้กับการใช้งาน printf() แต่การทำงานตรงกันข้าม คือ scanf() เป็นการรับข้อมูลเข้ามาในโปรแกรมผ่าน stdin แต่ printf() เป็นการแสดงผลไปที่ stdout
3) pointers กับ arrays
อาเรย์สามารถเก็บข้อมูลได้มากกว่า 1 จำนวนที่เป็นประเภทเดียวกันไว้ที่ตัวแปรเดียวกันได้ โดย a[i] อ้างอิงข้อมูลตัวที่ i ในอาเรย์ a โดยที่ข้อมูลตัวแรกคือ a[0] และชื่อตัวแปรใช้บอกค่าตำแหน่งในหน่วยความจำที่เก็บข้อมูลตัวแรกในอาเรย์ (a และ &a[0] ให้ค่าเท่ากัน รวมถึง *(a+i) และ a[i] ให้ค่าเท่ากัน)
4) การจำลองการเรียกฟังก์ชันแบบ call by reference
ปกติในภาษาซีไม่มีการ call by reference แต่จำลองได้โดยการใช้ pointer  
5) การใช้ const กับ pointers
สามารถใช้ const สามารถใช้ร่วมกับ pointer เพื่อแจ้งคอมไพเลอร์ว่าตัวแปรนั้นไม่สามารถแก้ไข้ได้
6) นิพจน์ใน pointer และการใช้ตัวดำเนินการคณิตศาสตร์กับ pointer 
ตัวแปร pointer สามารถเป็น operand ให้กับนิพจน์ทางคณิตศาสตร์ การกำหนดค่าและการเปรียบเทียบได้ แต่อาจจะไม่ได้ทุกตัวดำเนินการ
- ความหมายของนิพจน์ที่มี pointer กับตัวดำเนินการทางคณิตศาสตร์
  จะเป็นการดำเนินการกับจำนวน bytes ของประเภทของข้อมูลนั้นๆ
7) การใช้ pointer อ้างไปที่ฟังก์ชัน
สามารถใช้ตัวแปร pointer อ้างไปยังตำแหน่งในหน่วยความจำขงฟังก์ชันที่ต้องการได้
- การประกาศตัวแปร pointer ที่จะใช้อ้างไปยังฟังก์ชันในรูปแบบที่ต้องการ จะมีลักษณะการเขียน คือ 
  ประเภทของฟังก์ชัน (*ชื่อ pointer)(parameter)
8) การจองหน่วยความจำ
ปกติการจองความจำผ่านตัวแปรจะไม่สามารถเปลี่ยนแปลงพื้นที่ตอนทำงานได้ ซึ่งมีคลาสเป็น auto จะถูกเก็บอยู่ในหน่วยความจำ stack segment และตัวแปร global จะถูกเก็บอยู่ในหน่วยความจำ data segment แต่ฟังก์ชัน malloc() และ free() สามารถทำได้ คือ
- malloc() จะถูกเก็บอยู่ในหน่วยความจำ heap segment ใช้ในการจองพื้นที่เป็นจำนวน byte ประเภทข้อมูลการส่งกลับเป็น (void *) คือมีการส่งกลับเป็นตำแหน่งในหน่วยควมจำถ้าต้องการพื้นที่จัดเก็บต้อง explicit cast ให้เป็นประเภทข้อมูลที่ต้องการใช้ ถ้าพื้นที่ไม่มีพอในการจองจะคืนค่า NULL
- free(parameter); จะใช้คืนพื้นที่ของพารามิเตอร์ในหน่วยความจำ
 ตระกูลฟังก์ชันการจองพื้นที่
    void *malloc(size_t n);
    void *calloc(size_t n, size_t size);
    void *realloc(void *ptr, size_t size);
    void free(void *ptr);
9) segmentation fault (core dumped)
การเข้าถึงหน่วยความจำที่เราไม่ได้จองไว้